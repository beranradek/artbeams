/*
 * This file is generated by jOOQ.
 */
package org.xbery.artbeams.jooq.schema.tables


import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.xbery.artbeams.jooq.schema.DefaultSchema
import org.xbery.artbeams.jooq.schema.keys.FK_ROLE_ID
import org.xbery.artbeams.jooq.schema.keys.FK_USER_ID
import org.xbery.artbeams.jooq.schema.tables.records.UserRoleRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserRole(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UserRoleRecord>?,
    aliased: Table<UserRoleRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UserRoleRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>user_role</code>
         */
        val USER_ROLE: UserRole = UserRole()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UserRoleRecord> = UserRoleRecord::class.java

    /**
     * The column <code>user_role.user_id</code>.
     */
    val USER_ID: TableField<UserRoleRecord, String?> = createField(DSL.name("user_id"), SQLDataType.VARCHAR(40).nullable(false), this, "")

    /**
     * The column <code>user_role.role_id</code>.
     */
    val ROLE_ID: TableField<UserRoleRecord, String?> = createField(DSL.name("role_id"), SQLDataType.VARCHAR(40).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<UserRoleRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UserRoleRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>user_role</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>user_role</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>user_role</code> table reference
     */
    constructor(): this(DSL.name("user_role"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UserRoleRecord>): this(Internal.createPathAlias(child, key), child, key, USER_ROLE, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getReferences(): List<ForeignKey<UserRoleRecord, *>> = listOf(FK_USER_ID, FK_ROLE_ID)

    private lateinit var _users: Users
    private lateinit var _roles: Roles

    /**
     * Get the implicit join path to the <code>PUBLIC.users</code> table.
     */
    fun users(): Users {
        if (!this::_users.isInitialized)
            _users = Users(this, FK_USER_ID)

        return _users;
    }

    val users: Users
        get(): Users = users()

    /**
     * Get the implicit join path to the <code>PUBLIC.roles</code> table.
     */
    fun roles(): Roles {
        if (!this::_roles.isInitialized)
            _roles = Roles(this, FK_ROLE_ID)

        return _roles;
    }

    val roles: Roles
        get(): Roles = roles()
    override fun `as`(alias: String): UserRole = UserRole(DSL.name(alias), this)
    override fun `as`(alias: Name): UserRole = UserRole(alias, this)
    override fun `as`(alias: Table<*>): UserRole = UserRole(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UserRole = UserRole(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UserRole = UserRole(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): UserRole = UserRole(name.getQualifiedName(), null)
}
