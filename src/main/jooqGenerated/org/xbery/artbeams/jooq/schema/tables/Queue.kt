/*
 * This file is generated by jOOQ.
 */
package org.xbery.artbeams.jooq.schema.tables


import kotlin.collections.List

import kotlinx.datetime.Instant

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.xbery.artbeams.common.persistence.jooq.converter.InstantConverter
import org.xbery.artbeams.jooq.schema.DefaultSchema
import org.xbery.artbeams.jooq.schema.indexes.IDX_QUEUE_EXPIRATION
import org.xbery.artbeams.jooq.schema.indexes.IDX_QUEUE_NEXT_ACTION_TIME
import org.xbery.artbeams.jooq.schema.keys.CONSTRAINT_66
import org.xbery.artbeams.jooq.schema.tables.records.QueueRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Queue(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, QueueRecord>?,
    aliased: Table<QueueRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<QueueRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>queue</code>
         */
        val QUEUE: Queue = Queue()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<QueueRecord> = QueueRecord::class.java

    /**
     * The column <code>queue.id</code>.
     */
    val ID: TableField<QueueRecord, String?> = createField(DSL.name("id"), SQLDataType.VARCHAR(60).nullable(false), this, "")

    /**
     * The column <code>queue.entered_time</code>.
     */
    val ENTERED_TIME: TableField<QueueRecord, Instant?> = createField(DSL.name("entered_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "", InstantConverter())

    /**
     * The column <code>queue.entered_origin</code>.
     */
    val ENTERED_ORIGIN: TableField<QueueRecord, String?> = createField(DSL.name("entered_origin"), SQLDataType.VARCHAR(60).nullable(false), this, "")

    /**
     * The column <code>queue.attempts</code>.
     */
    val ATTEMPTS: TableField<QueueRecord, Int?> = createField(DSL.name("attempts"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>queue.next_action_time</code>.
     */
    val NEXT_ACTION_TIME: TableField<QueueRecord, Instant?> = createField(DSL.name("next_action_time"), SQLDataType.LOCALDATETIME(6), this, "", InstantConverter())

    /**
     * The column <code>queue.processed_time</code>.
     */
    val PROCESSED_TIME: TableField<QueueRecord, Instant?> = createField(DSL.name("processed_time"), SQLDataType.LOCALDATETIME(6), this, "", InstantConverter())

    /**
     * The column <code>queue.processed_origin</code>.
     */
    val PROCESSED_ORIGIN: TableField<QueueRecord, String?> = createField(DSL.name("processed_origin"), SQLDataType.VARCHAR(60), this, "")

    /**
     * The column <code>queue.last_attempt_time</code>.
     */
    val LAST_ATTEMPT_TIME: TableField<QueueRecord, Instant?> = createField(DSL.name("last_attempt_time"), SQLDataType.LOCALDATETIME(6), this, "", InstantConverter())

    /**
     * The column <code>queue.last_attempt_origin</code>.
     */
    val LAST_ATTEMPT_ORIGIN: TableField<QueueRecord, String?> = createField(DSL.name("last_attempt_origin"), SQLDataType.VARCHAR(60), this, "")

    /**
     * The column <code>queue.last_result</code>.
     */
    val LAST_RESULT: TableField<QueueRecord, String?> = createField(DSL.name("last_result"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>queue.expiration_time</code>.
     */
    val EXPIRATION_TIME: TableField<QueueRecord, Instant?> = createField(DSL.name("expiration_time"), SQLDataType.LOCALDATETIME(6), this, "", InstantConverter())

    private constructor(alias: Name, aliased: Table<QueueRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<QueueRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>queue</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>queue</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>queue</code> table reference
     */
    constructor(): this(DSL.name("queue"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, QueueRecord>): this(Internal.createPathAlias(child, key), child, key, QUEUE, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(IDX_QUEUE_EXPIRATION, IDX_QUEUE_NEXT_ACTION_TIME)
    override fun getPrimaryKey(): UniqueKey<QueueRecord> = CONSTRAINT_66
    override fun `as`(alias: String): Queue = Queue(DSL.name(alias), this)
    override fun `as`(alias: Name): Queue = Queue(alias, this)
    override fun `as`(alias: Table<*>): Queue = Queue(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Queue = Queue(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Queue = Queue(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Queue = Queue(name.getQualifiedName(), null)
}
