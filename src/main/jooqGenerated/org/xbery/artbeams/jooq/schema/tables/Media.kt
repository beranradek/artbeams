/*
 * This file is generated by jOOQ.
 */
package org.xbery.artbeams.jooq.schema.tables


import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.xbery.artbeams.jooq.schema.DefaultSchema
import org.xbery.artbeams.jooq.schema.indexes.IDX_MEDIA_FILENAME
import org.xbery.artbeams.jooq.schema.keys.CONSTRAINT_62
import org.xbery.artbeams.jooq.schema.tables.records.MediaRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Media(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, MediaRecord>?,
    aliased: Table<MediaRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<MediaRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>media</code>
         */
        val MEDIA: Media = Media()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<MediaRecord> = MediaRecord::class.java

    /**
     * The column <code>media.id</code>.
     */
    val ID: TableField<MediaRecord, String?> = createField(DSL.name("id"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column <code>media.filename</code>.
     */
    val FILENAME: TableField<MediaRecord, String?> = createField(DSL.name("filename"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column <code>media.content_type</code>.
     */
    val CONTENT_TYPE: TableField<MediaRecord, String?> = createField(DSL.name("content_type"), SQLDataType.VARCHAR(40).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>media.size</code>.
     */
    val SIZE: TableField<MediaRecord, Int?> = createField(DSL.name("size"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>media.data</code>.
     */
    val DATA: TableField<MediaRecord, ByteArray?> = createField(DSL.name("data"), SQLDataType.BLOB, this, "")

    /**
     * The column <code>media.private_access</code>.
     */
    val PRIVATE_ACCESS: TableField<MediaRecord, Boolean?> = createField(DSL.name("private_access"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("FALSE"), SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>media.width</code>.
     */
    val WIDTH: TableField<MediaRecord, Int?> = createField(DSL.name("width"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>media.height</code>.
     */
    val HEIGHT: TableField<MediaRecord, Int?> = createField(DSL.name("height"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "")

    private constructor(alias: Name, aliased: Table<MediaRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<MediaRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>media</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>media</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>media</code> table reference
     */
    constructor(): this(DSL.name("media"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, MediaRecord>): this(Internal.createPathAlias(child, key), child, key, MEDIA, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(IDX_MEDIA_FILENAME)
    override fun getPrimaryKey(): UniqueKey<MediaRecord> = CONSTRAINT_62
    override fun `as`(alias: String): Media = Media(DSL.name(alias), this)
    override fun `as`(alias: Name): Media = Media(alias, this)
    override fun `as`(alias: Table<*>): Media = Media(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Media = Media(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Media = Media(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Media = Media(name.getQualifiedName(), null)
}
