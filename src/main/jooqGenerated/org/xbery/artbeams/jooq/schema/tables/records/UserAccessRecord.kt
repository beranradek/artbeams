/*
 * This file is generated by jOOQ.
 */
package org.xbery.artbeams.jooq.schema.tables.records


import java.time.LocalDate
import java.time.LocalDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import org.xbery.artbeams.jooq.schema.tables.UserAccess


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserAccessRecord() : UpdatableRecordImpl<UserAccessRecord>(UserAccess.USER_ACCESS) {

    open var id: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var accessTime: LocalDateTime?
        set(value): Unit = set(1, value)
        get(): LocalDateTime? = get(1) as LocalDateTime?

    open var accessDate: LocalDate?
        set(value): Unit = set(2, value)
        get(): LocalDate? = get(2) as LocalDate?

    open var ip: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var userAgent: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var entityType: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var entityId: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    /**
     * Create a detached, initialised UserAccessRecord
     */
    constructor(id: String? = null, accessTime: LocalDateTime? = null, accessDate: LocalDate? = null, ip: String? = null, userAgent: String? = null, entityType: String? = null, entityId: String? = null): this() {
        this.id = id
        this.accessTime = accessTime
        this.accessDate = accessDate
        this.ip = ip
        this.userAgent = userAgent
        this.entityType = entityType
        this.entityId = entityId
        resetChangedOnNotNull()
    }
}
