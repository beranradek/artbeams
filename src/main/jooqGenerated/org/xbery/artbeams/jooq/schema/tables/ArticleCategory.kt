/*
 * This file is generated by jOOQ.
 */
package org.xbery.artbeams.jooq.schema.tables


import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.xbery.artbeams.jooq.schema.DefaultSchema
import org.xbery.artbeams.jooq.schema.tables.records.ArticleCategoryRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ArticleCategory(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ArticleCategoryRecord>?,
    aliased: Table<ArticleCategoryRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ArticleCategoryRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>article_category</code>
         */
        val ARTICLE_CATEGORY: ArticleCategory = ArticleCategory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ArticleCategoryRecord> = ArticleCategoryRecord::class.java

    /**
     * The column <code>article_category.article_id</code>.
     */
    val ARTICLE_ID: TableField<ArticleCategoryRecord, String?> = createField(DSL.name("article_id"), SQLDataType.VARCHAR(40).nullable(false), this, "")

    /**
     * The column <code>article_category.category_id</code>.
     */
    val CATEGORY_ID: TableField<ArticleCategoryRecord, String?> = createField(DSL.name("category_id"), SQLDataType.VARCHAR(40).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ArticleCategoryRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ArticleCategoryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>article_category</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>article_category</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>article_category</code> table reference
     */
    constructor(): this(DSL.name("article_category"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ArticleCategoryRecord>): this(Internal.createPathAlias(child, key), child, key, ARTICLE_CATEGORY, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun `as`(alias: String): ArticleCategory = ArticleCategory(DSL.name(alias), this)
    override fun `as`(alias: Name): ArticleCategory = ArticleCategory(alias, this)
    override fun `as`(alias: Table<*>): ArticleCategory = ArticleCategory(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ArticleCategory = ArticleCategory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ArticleCategory = ArticleCategory(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ArticleCategory = ArticleCategory(name.getQualifiedName(), null)
}
