/*
 * This file is generated by jOOQ.
 */
package org.xbery.artbeams.jooq.schema.tables


import java.time.Instant

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.xbery.artbeams.common.persistence.jooq.converter.InstantConverter
import org.xbery.artbeams.jooq.schema.DefaultSchema
import org.xbery.artbeams.jooq.schema.indexes.IDX_NEWS_SUBSCRIPTION_EMAIL
import org.xbery.artbeams.jooq.schema.keys.CONSTRAINT_7A
import org.xbery.artbeams.jooq.schema.tables.records.NewsSubscriptionRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class NewsSubscription(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, NewsSubscriptionRecord>?,
    aliased: Table<NewsSubscriptionRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<NewsSubscriptionRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>news_subscription</code>
         */
        val NEWS_SUBSCRIPTION: NewsSubscription = NewsSubscription()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<NewsSubscriptionRecord> = NewsSubscriptionRecord::class.java

    /**
     * The column <code>news_subscription.id</code>.
     */
    val ID: TableField<NewsSubscriptionRecord, String?> = createField(DSL.name("id"), SQLDataType.VARCHAR(40).nullable(false), this, "")

    /**
     * The column <code>news_subscription.email</code>.
     */
    val EMAIL: TableField<NewsSubscriptionRecord, String?> = createField(DSL.name("email"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>news_subscription.created</code>.
     */
    val CREATED: TableField<NewsSubscriptionRecord, Instant?> = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "", InstantConverter())

    /**
     * The column <code>news_subscription.confirmed</code>.
     */
    val CONFIRMED: TableField<NewsSubscriptionRecord, Instant?> = createField(DSL.name("confirmed"), SQLDataType.LOCALDATETIME(6), this, "", InstantConverter())

    private constructor(alias: Name, aliased: Table<NewsSubscriptionRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<NewsSubscriptionRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>news_subscription</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>news_subscription</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>news_subscription</code> table reference
     */
    constructor(): this(DSL.name("news_subscription"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, NewsSubscriptionRecord>): this(Internal.createPathAlias(child, key), child, key, NEWS_SUBSCRIPTION, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(IDX_NEWS_SUBSCRIPTION_EMAIL)
    override fun getPrimaryKey(): UniqueKey<NewsSubscriptionRecord> = CONSTRAINT_7A
    override fun `as`(alias: String): NewsSubscription = NewsSubscription(DSL.name(alias), this)
    override fun `as`(alias: Name): NewsSubscription = NewsSubscription(alias, this)
    override fun `as`(alias: Table<*>): NewsSubscription = NewsSubscription(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): NewsSubscription = NewsSubscription(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): NewsSubscription = NewsSubscription(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): NewsSubscription = NewsSubscription(name.getQualifiedName(), null)
}
