/*
 * This file is generated by jOOQ.
 */
package org.xbery.artbeams.jooq.schema.tables


import kotlinx.datetime.Instant

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.xbery.artbeams.common.persistence.jooq.converter.InstantConverter
import org.xbery.artbeams.jooq.schema.DefaultSchema
import org.xbery.artbeams.jooq.schema.keys.CONSTRAINT_C
import org.xbery.artbeams.jooq.schema.tables.records.ProductsRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Products(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ProductsRecord>?,
    aliased: Table<ProductsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ProductsRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>products</code>
         */
        val PRODUCTS: Products = Products()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ProductsRecord> = ProductsRecord::class.java

    /**
     * The column <code>products.id</code>.
     */
    val ID: TableField<ProductsRecord, String?> = createField(DSL.name("id"), SQLDataType.VARCHAR(40).nullable(false), this, "")

    /**
     * The column <code>products.created</code>.
     */
    val CREATED: TableField<ProductsRecord, Instant?> = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "", InstantConverter())

    /**
     * The column <code>products.created_by</code>.
     */
    val CREATED_BY: TableField<ProductsRecord, String?> = createField(DSL.name("created_by"), SQLDataType.VARCHAR(40).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>products.modified</code>.
     */
    val MODIFIED: TableField<ProductsRecord, Instant?> = createField(DSL.name("modified"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "", InstantConverter())

    /**
     * The column <code>products.modified_by</code>.
     */
    val MODIFIED_BY: TableField<ProductsRecord, String?> = createField(DSL.name("modified_by"), SQLDataType.VARCHAR(40).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>products.slug</code>.
     */
    val SLUG: TableField<ProductsRecord, String?> = createField(DSL.name("slug"), SQLDataType.VARCHAR(128).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>products.title</code>.
     */
    val TITLE: TableField<ProductsRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(128).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>products.filename</code>.
     */
    val FILENAME: TableField<ProductsRecord, String?> = createField(DSL.name("filename"), SQLDataType.VARCHAR(128).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>products.confirmation_mailing_group_id</code>.
     */
    val CONFIRMATION_MAILING_GROUP_ID: TableField<ProductsRecord, String?> = createField(DSL.name("confirmation_mailing_group_id"), SQLDataType.VARCHAR(128).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>products.mailing_group_id</code>.
     */
    val MAILING_GROUP_ID: TableField<ProductsRecord, String?> = createField(DSL.name("mailing_group_id"), SQLDataType.VARCHAR(128).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    private constructor(alias: Name, aliased: Table<ProductsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ProductsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>products</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>products</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>products</code> table reference
     */
    constructor(): this(DSL.name("products"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ProductsRecord>): this(Internal.createPathAlias(child, key), child, key, PRODUCTS, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getPrimaryKey(): UniqueKey<ProductsRecord> = CONSTRAINT_C
    override fun `as`(alias: String): Products = Products(DSL.name(alias), this)
    override fun `as`(alias: Name): Products = Products(alias, this)
    override fun `as`(alias: Table<*>): Products = Products(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Products = Products(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Products = Products(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Products = Products(name.getQualifiedName(), null)
}
