/*
 * This file is generated by jOOQ.
 */
package org.xbery.artbeams.jooq.schema.tables


import java.time.Instant

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.xbery.artbeams.common.persistence.jooq.converter.InstantConverter
import org.xbery.artbeams.jooq.schema.DefaultSchema
import org.xbery.artbeams.jooq.schema.indexes.IDX_AUTH_CODE_USER_ID
import org.xbery.artbeams.jooq.schema.keys.AUTH_CODE_PKEY
import org.xbery.artbeams.jooq.schema.tables.records.AuthCodeRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AuthCode(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, AuthCodeRecord>?,
    aliased: Table<AuthCodeRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<AuthCodeRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>auth_code</code>
         */
        val AUTH_CODE: AuthCode = AuthCode()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AuthCodeRecord> = AuthCodeRecord::class.java

    /**
     * The column <code>auth_code.code</code>.
     */
    val CODE: TableField<AuthCodeRecord, String?> = createField(DSL.name("code"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>auth_code.purpose</code>.
     */
    val PURPOSE: TableField<AuthCodeRecord, String?> = createField(DSL.name("purpose"), SQLDataType.VARCHAR(60).nullable(false), this, "")

    /**
     * The column <code>auth_code.user_id</code>.
     */
    val USER_ID: TableField<AuthCodeRecord, String?> = createField(DSL.name("user_id"), SQLDataType.VARCHAR(60).nullable(false), this, "")

    /**
     * The column <code>auth_code.created</code>.
     */
    val CREATED: TableField<AuthCodeRecord, Instant?> = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "", InstantConverter())

    /**
     * The column <code>auth_code.valid_to</code>.
     */
    val VALID_TO: TableField<AuthCodeRecord, Instant?> = createField(DSL.name("valid_to"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "", InstantConverter())

    /**
     * The column <code>auth_code.used</code>.
     */
    val USED: TableField<AuthCodeRecord, Instant?> = createField(DSL.name("used"), SQLDataType.LOCALDATETIME(6), this, "", InstantConverter())

    private constructor(alias: Name, aliased: Table<AuthCodeRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<AuthCodeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>auth_code</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>auth_code</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>auth_code</code> table reference
     */
    constructor(): this(DSL.name("auth_code"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, AuthCodeRecord>): this(Internal.createPathAlias(child, key), child, key, AUTH_CODE, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(IDX_AUTH_CODE_USER_ID)
    override fun getPrimaryKey(): UniqueKey<AuthCodeRecord> = AUTH_CODE_PKEY
    override fun `as`(alias: String): AuthCode = AuthCode(DSL.name(alias), this)
    override fun `as`(alias: Name): AuthCode = AuthCode(alias, this)
    override fun `as`(alias: Table<*>): AuthCode = AuthCode(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): AuthCode = AuthCode(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): AuthCode = AuthCode(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): AuthCode = AuthCode(name.getQualifiedName(), null)
}
