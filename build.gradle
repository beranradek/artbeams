import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.jooq.meta.jaxb.Logging
import com.yahoo.platform.yui.compressor.CssCompressor

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        // The Spring Boot Gradle Plugin provides Spring Boot support in Gradle, 
        // allowing you to package executable jar or war archives, 
        // run Spring Boot applications and use the dependency management 
        // provided by spring-boot-dependencies.
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        // Minification of CSS files:
        classpath "com.yahoo.platform.yui:yuicompressor:2.4.8"
    }
}

plugins {
    // Automatically make certain annotated classes open for CGLIB proxies to work, e.g. @Configuration etc.
    id "org.jetbrains.kotlin.plugin.spring" version "$kotlinVersion"
    // Integrates the jOOQ code generation tool
    id("nu.studer.jooq") version "$jooqPluginVersion"
    // id("org.jooq.jooq-codegen-gradle") version "jooqPluginVersion" // not compatible with Spring Boot yet, maybe later
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'org.xbery'
version = '1.7.1-SNAPSHOT'
def jvmTargetVersion = JavaVersion.VERSION_21

repositories {
    mavenCentral()
}

java {
    targetCompatibility = jvmTargetVersion
    sourceCompatibility = JavaVersion.VERSION_21
}

dependencies {
    // Kotlin language
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion") // mandatory as of Spring Framework 5
    // It is generally recommended to use kotlinx.datetime multiplatform library when working with Kotlin.
    implementation "org.jetbrains.kotlinx:kotlinx-datetime:$kotlinDateTimeVersion"

    // Spring Boot: Thanks to Spring Boot Gradle Plugin, versions can be omitted
    // Support for Web MVC, Freemarker templates, database layer, security
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-freemarker")
    implementation("org.springframework.boot:spring-boot-starter-jdbc")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation("org.springframework.boot:spring-boot-starter-validation")

    // Database and repository libraries
    // JOOQ
    // Configuration described at https://www.baeldung.com/spring-boot-support-for-jooq
    implementation "org.springframework.boot:spring-boot-starter-jooq:$springBootVersion"

    // JOOQ Code generation specific dependencies, like JDBC drivers, codegen extensions, etc.
    jooqGenerator "org.postgresql:postgresql:$postgresqlVersion"
    // Extension for org.jooq.meta.extensions.ddl.DDLDatabase, ...
    jooqGenerator "org.jooq:jooq-meta-extensions:$jooqVersion"

    runtimeOnly("org.postgresql:postgresql:$postgresqlVersion")

    implementation("com.google.api-client:google-api-client:2.7.0")

    // OAuth 2.0 Verification Code Receiver For Google OAuth Client Library For Java.
    // Runs an HTTP server on a free port, waiting for a redirect with the verification code.
    implementation("com.google.oauth-client:google-oauth-client-jetty:1.34.1")

    implementation("com.google.oauth-client:google-oauth-client:1.35.0")
    implementation("com.google.apis:google-api-services-docs:v1-rev20230929-2.0.0")

    compileOnly("org.springframework.boot:spring-boot-devtools")

    // Forms
    implementation("net.formio:formio:1.7.0")

    // Working with text/HTML
    implementation("org.apache.commons:commons-text:1.11.0")
    implementation("commons-io:commons-io:2.15.1")

    // Evernote integration
    implementation("com.evernote:evernote-api:1.25.1")

    // Markdown support
    implementation("com.vladsch.flexmark:flexmark:0.50.28")
    implementation("com.vladsch.flexmark:flexmark-ext-attributes:0.50.28")
    implementation("javax.inject:javax.inject:1")

    // Detection of client - browser capabilities
    implementation("com.blueconic:browscap-java:1.4.3")

    // HTTP client for communication with external services
    implementation("org.apache.httpcomponents:httpclient:4.5.14")

    // JSON API
    implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.module:jackson-modules-java8:$jacksonVersion"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"

    // Password strength estimation library https://github.com/nulab/zxcvbn4j
    implementation("com.nulab-inc:zxcvbn:$zxcvbnVersion")

    // Mailing
    implementation "com.mailgun:mailgun-java:$mailgunVersion"

    // Working with PDF documents
    implementation("org.apache.pdfbox:pdfbox:3.0.3")

    // Working with webp and other images
    implementation("com.sksamuel.scrimage:scrimage-core:4.1.1")
    implementation("com.sksamuel.scrimage:scrimage-webp:4.1.1")
    implementation("com.drewnoakes:metadata-extractor:2.19.0")

    // Testing Spring Boot application
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.junit.jupiter:junit-jupiter:5.10.1") // for older tests; kotest is preferred

    testImplementation(platform("io.kotest:kotest-bom:$kotestVersion"))
    testImplementation("io.kotest:kotest-runner-junit5") // necessary runner also for kotest
    testImplementation("io.kotest:kotest-assertions-core")
    testImplementation("io.kotest.extensions:kotest-extensions-spring:$kotestSpringVersion")
    // Mocking library for Kotlin. MockK builds proxies for mocked (typically final) classes.
    testImplementation("io.mockk:mockk:$mockkVersion")
}

jooq {
    version = property("jooqVersion")
    configurations {
        main {  // name of the jOOQ configuration
            generationTool {
                logging = Logging.WARN
                generator {
                    name = 'org.jooq.codegen.KotlinGenerator'
                    strategy {
                        name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                    }
                    database {
                        // Script-defined database (DDLDatabase) does not require live connection to the database (jdbc config).
                        // See https://www.jooq.org/doc/latest/manual/code-generation/codegen-ddl/ for properties of DDLDatabase
                        name = "org.jooq.meta.extensions.ddl.DDLDatabase"
                        properties {
                            // Specify the location of your SQL script.
                            // You may use ant-style file matching, e.g. /path/**/to/*.sql
                            //
                            // Where:
                            // - ** matches any directory subtree
                            // - * matches any number of characters in a directory / file name
                            // - ? matches a single character in a directory / file name
                            property {
                                key = "scripts"
                                value = "src/main/resources/sql/create_tables.sql"
                            }
                            // The default name case for unquoted objects:
                            //
                            // - as_is: unquoted object names are kept unquoted
                            // (this means case insensitive, H2 and PostgreSQL can handle case insensitive object names)
                            // - upper: unquoted object names are turned into upper case (most databases, also H2)
                            // - lower: unquoted object names are turned into lower case (e.g. PostgreSQL)
                            property {
                                key = "defaultNameCase"
                                value = "lower"
                            }
                            // public schema is used by default
                            // property {
                            //    key = "unqualifiedSchema"
                            //    value = "public"
                            //}
                        }
                        forcedTypes {
                            forcedType {
                                userType = "java.time.Instant"
                                converter = "org.xbery.artbeams.common.persistence.jooq.converter.InstantConverter"
                                // A Java regex that must match target fully-qualified columns, attributes, parameters
                                // for which converter is applied in generated code.
                                // Use the pipe to separate several expressions.
                                // Must match some used columns!
                                includeExpression = ".*._time.*|created|modified|completed|finished|valid_from|valid_to|used|consent|downloaded"
                                includeTypes = ".*"
                            }
                            //forcedType {
                            //    userType = "kotlinx.datetime.LocalDate"
                            //    converter = "org.xbery.artbeams.common.persistence.jooq.converter.LocalDateConverter"
                            //    // A Java regex that must match target fully-qualified columns, attributes, parameters
                            //    // for which converter is applied in generated code.
                            //    // Use the pipe to separate several expressions.
                            //    // Must match some used columns!
                            //    includeExpression = ".*._date"
                            //    includeTypes = ".*"
                            //}
                        }
                    }
                    generate {
                        javaTimeTypes = true
                    }
                    target {
                        // Generate to separate source set since it can clean also project files!
                        packageName = 'org.xbery.artbeams.jooq.schema'
                        directory = 'src/main/jooqGenerated'
                    }
                }
            }
        }
    }
}

sourceSets {
    jooqGenerated {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

def cssDir = file("$projectDir/src/main/resources/static/css")
def outputCss = file("$cssDir/styles.css")

task minifyCss {
    group = "build"
    description = "Minifies and merges CSS files into styles.css"

    inputs.files(
        "$cssDir/bootstrap.min.css", // already minified
        "$cssDir/common-styles.css",
        "$cssDir/public-styles.css"
    )
    outputs.file(outputCss)

    doLast {
        outputCss.withWriter("UTF-8") { writer ->
            // Header ofr merged CSS file
            writer << '@charset "UTF-8";\n'
            writer << """/*
 File automatically generated during the build,
 composed from more sources:
   - bootstrap.min.css
   - common-styles.css
   - public-styles.css
*/
"""

            // 1) Add bootstrap.min.css
            writer << file("$cssDir/bootstrap.min.css").getText("UTF-8") << "\n"

            // 2) Minify and add common-styles.css a public-styles.css
            ["common-styles.css", "public-styles.css"].each { cssFile ->
                file("$cssDir/$cssFile").withReader("UTF-8") { reader ->
                    def compressor = new CssCompressor(reader)
                    compressor.compress(writer, -1) // -1 = bez omezení délky řádku
                }
                writer << "\n"
            }
        }
        println "CSS files minified and merged into: ${outputCss}"
    }
}

// Ensure minifyCss runs before processResources
// See https://docs.gradle.org/8.5/userguide/validation_problems.html#implicit_dependency

// Remove build.dependsOn(minifyCss) as processResources already depends on minifyCss

tasks.named('processResources') {
    dependsOn(tasks.named('minifyCss'))
}

// force Spring Boot plugin to keep jOOQ version in sync
ext["jooq.version"] = property("jooqVersion")

tasks.named('generateJooq').configure { allInputsDeclared = true }

// Task stage for Heroku deployment
task stage(dependsOn: ['build', 'clean'])

tasks.withType(KotlinCompile).all {
    kotlinOptions {
        // By default, types from Java APIs used in Kotlin are recognized as platform types for which null-checks are relaxed.
        // Kotlin support for JSR 305 annotations + Spring nullability annotations provide null-safety for the whole Spring Framework API
        // to Kotlin developers, with the advantage of dealing with null related issues at compile time.
        freeCompilerArgs = ["-Xjsr305=strict", "-opt-in=kotlin.RequiresOptIn"]
        jvmTarget = jvmTargetVersion
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

build.mustRunAfter clean
