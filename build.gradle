buildscript {
    ext {
        springBootVersion = '3.2.1'
        kotlinVersion = '1.9.22'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        // The Spring Boot Gradle Plugin provides Spring Boot support in Gradle, 
        // allowing you to package executable jar or war archives, 
        // run Spring Boot applications and use the dependency management 
        // provided by spring-boot-dependencies.
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'org.xbery'
version = '1.3.0-SNAPSHOT'
def jvmTargetVersion = JavaVersion.VERSION_21
kotlinVersion = '1.9.22'
def jacksonVersion = '2.16.1'

repositories {
    mavenCentral()
}

java {
    targetCompatibility = jvmTargetVersion
    sourceCompatibility = JavaVersion.VERSION_21
}

dependencies {
    // Kotlin language
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion") // mandatory as of Spring Framework 5

    // Spring Boot: Thanks to Spring Boot Gradle Plugin, versions can be omitted
    // Support for Web MVC, Freemarker templates, database layer, security
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-freemarker")
    implementation("org.springframework.boot:spring-boot-starter-jdbc")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    compileOnly("org.springframework.boot:spring-boot-devtools")

    // Temporary migration report
    implementation("org.springframework.boot:spring-boot-properties-migrator")

    // Database and repository libraries
    runtimeOnly("org.postgresql:postgresql:9.4.1208")
    implementation("org.xbery:overview-repo-sql:1.2.0")

    // Forms
    implementation("net.formio:formio:1.7.0")

    // Working with text/HTML
    implementation("org.apache.commons:commons-text:1.11.0")
    implementation("commons-io:commons-io:2.15.1")

    // Evernote integration
    implementation("com.evernote:evernote-api:1.25.1")

    // Markdown support
    implementation("com.vladsch.flexmark:flexmark:0.50.28")
    implementation("com.vladsch.flexmark:flexmark-ext-attributes:0.50.28")
    implementation("javax.inject:javax.inject:1")

    // Detection of client - browser capabilities
    implementation("com.blueconic:browscap-java:1.4.3")

    // HTTP client for communication with external services
    implementation("org.apache.httpcomponents:httpclient:4.5.14")

    // JSON API
    implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.module:jackson-modules-java8:$jacksonVersion"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"

    // Working with PDF documents
    implementation("org.apache.pdfbox:pdfbox:2.0.17")

    // Working with webp and other images
    implementation("com.sksamuel.scrimage:scrimage-core:4.1.1")
    implementation("com.sksamuel.scrimage:scrimage-webp:4.1.1")
    implementation("com.drewnoakes:metadata-extractor:2.16.0")

    // Testing Spring Boot application
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.junit.jupiter:junit-jupiter:5.10.1")
}

// Task stage for Heroku deployment
task stage(dependsOn: ['build', 'clean'])

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        // By default, types from Java APIs used in Kotlin are recognized as platform types for which null-checks are relaxed.
        // Kotlin support for JSR 305 annotations + Spring nullability annotations provide null-safety for the whole Spring Framework API
        // to Kotlin developers, with the advantage of dealing with null related issues at compile time.
        freeCompilerArgs = ["-Xjsr305=strict", "-opt-in=kotlin.RequiresOptIn"]
        jvmTarget = jvmTargetVersion
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

build.mustRunAfter clean
